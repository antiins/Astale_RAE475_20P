import socket
import select

#Funkcija, kas suutiis zinojumus visiem savienotajiem klientiem
def broadcast_data (sock, message):
	for socket in CONNECTION_LIST:
		if socket!=server_socket and socket!=sock :
			try:
				socket.send(message)
			except:				
				socket.close()
				CONNECTION_LIST.remove(socket)

if __name__=="__main__":
	
	# sARAKSTS, KAS SEKO VISIEM LIETOTAJIEM
	CONNECTION_LIST=[]
	RECV_BUFFER=4096 
	PORT=23
	
	server_socket=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	
	server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	server_socket.bind(("127.0.0.1", PORT))
	server_socket.listen(10)

	# sERVERA SOCKEWTS TIEK PIEVIENOTS PIE NOLASMAAJIEM SAVIENOJUMIEM
	CONNECTION_LIST.append(server_socket)

	print ("Savienojums ir izvedojuies ar servera portu " + str(PORT))

	while 1:
		
		read_sockets,write_sockets,error_socket=select.select(CONNECTION_LIST,[],[])

		for sock in read_sockets:
			#Jauns savienojums
			if sock==server_socket:
				
				sockfd, addr=server_socket.accept()
				CONNECTION_LIST.append(sockfd)
				print ("Klients (%s, %s) ie savienots" % addr)
				
				broadcast_data(sockfd, "[%s:%s] ir pievineojies\n" % addr)
			
			#Ienaakoshas zinas no lietotaja
			else:
				try:
				
					data=sock.recv(RECV_BUFFER)                
				
				except:
					broadcast_data(sock, "Client (%s, %s) is offline" % addr)
					print ("Klients (%s, %s) ir offline" % addr)
					sock.close()
					CONNECTION_LIST.remove(sock)
					continue
	
	server_socket.close()
